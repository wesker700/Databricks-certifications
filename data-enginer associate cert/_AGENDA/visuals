def display_forecast_table_sorted(forecast_df):
    # Ensure January to December order by Month_Num
    display_cols = [
        'Month', 'Planned', 'Forecasted_Actual', 'Lower_CI', 'Upper_CI',
        'Variance_from_Plan', 'Variance_Pct', 'Confidence', 'Anomaly_Flag'
    ]
    sorted_df = forecast_df.sort_values('Month_Num')
    table_df = sorted_df[display_cols].copy()
    table_df['Variance_Pct'] = table_df['Variance_Pct'].round(1)
    table_df['Lower_CI'] = table_df['Lower_CI'].astype(int)
    table_df['Upper_CI'] = table_df['Upper_CI'].astype(int)
    table_df['Planned'] = table_df['Planned'].astype(int)
    table_df['Forecasted_Actual'] = table_df['Forecasted_Actual'].astype(int)
    table_df['Variance_from_Plan'] = table_df['Variance_from_Plan'].astype(int)
    print(table_df.to_string(index=False))

# Example usage:
display_forecast_table_sorted(actual_2025_forecast)




import matplotlib.dates as mdates
import matplotlib.pyplot as plt

def plot_plan_forecast_timeseries_full(forecast_df, ts_historical):
    # Sort forecast_df
    sorted_df = forecast_df.sort_values('Month_Num').reset_index(drop=True)
    months_2025 = pd.to_datetime([f'2025-{m:02d}-01' for m in sorted_df['Month_Num']])
    
    plt.figure(figsize=(15, 7))

    # Plot historical actuals (2021-2024)
    plt.plot(ts_historical.index, ts_historical.values, marker='o', label='Historical Actual (2021–2024)', color='blue')

    # Mark year boundaries on historical data
    years = sorted(ts_historical.index.year.unique())
    for year in years:
        idx = ts_historical.index[ts_historical.index.year == year][0]
        plt.axvline(x=idx, color='gray', linestyle=':', linewidth=1, alpha=0.25)
        # Label each year at the bottom
        plt.text(idx, plt.ylim()[0], str(year), color='blue', fontsize=10, ha='left', va='bottom', alpha=0.9)

    # Plot 2025 Plan and Forecasted Actuals
    plt.plot(months_2025, sorted_df['Planned'], marker='s', label='2025 Planned', color='green', linestyle='--')
    plt.plot(months_2025, sorted_df['Forecasted_Actual'], marker='^', label='2025 Forecasted Actual', color='red')

    # Confidence intervals
    plt.fill_between(months_2025, sorted_df['Lower_CI'], sorted_df['Upper_CI'],
                     color='gray', alpha=0.2, label='2025 95% CI')
    
    # Mark anomalies
    for i, row in sorted_df.iterrows():
        if row['Anomaly_Flag']:
            plt.scatter(months_2025[i], row['Forecasted_Actual'], color='black', s=100, edgecolors='yellow', linewidths=2, zorder=10, label='Anomaly' if i == 0 else "")

    # Set axis limits and ticks
    plt.xlim([ts_historical.index.min(), months_2025[-1]])
    
    # Major ticks: years for historical, months for 2025
    ax = plt.gca()
    # Year locators for historical data
    ax.xaxis.set_major_locator(mdates.YearLocator())
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
    # Minor ticks: months
    ax.xaxis.set_minor_locator(mdates.MonthLocator())
    ax.xaxis.set_minor_formatter(mdates.DateFormatter('%b'))

    # Add extra month labels only for 2025
    month_labels = [m[:3] for m in sorted_df['Month']]
    xtick_positions = list(months_2025)
    plt.xticks(list(ax.get_xticks()) + xtick_positions, 
               [str(int(x)) if isinstance(x, float) and not np.isnan(x) else "" for x in ax.get_xticks()] + month_labels,
               rotation=45, ha='right')

    # Titles and labels
    plt.title('Student Enrolment: 2021–2024 Actuals, 2025 Plan, and Forecasted Actuals')
    plt.ylabel('Student Count')
    plt.xlabel('Date')
    plt.grid(True, alpha=0.3)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Example usage:
plot_plan_forecast_timeseries_full(actual_2025_forecast, ts_historical)


#forecasting ribon
import matplotlib.pyplot as plt
import pandas as pd

def forecast_visuals_with_ci(forecast_df):
    # Sort by Month_Num to ensure Jan–Dec order
    sorted_df = forecast_df.sort_values('Month_Num').reset_index(drop=True)
    months_2025 = pd.to_datetime([f'2025-{m:02d}-01' for m in sorted_df['Month_Num']])
    month_labels = [m[:3] for m in sorted_df['Month']]

    # --- 1. LINE CHART WITH FORECAST RIBBON ---
    plt.figure(figsize=(11,5))
    plt.plot(months_2025, sorted_df['Forecasted_Actual'], marker='o', color='red', label='Forecasted Actual')
    plt.fill_between(months_2025, sorted_df['Lower_CI'], sorted_df['Upper_CI'], color='gray', alpha=0.3, label='95% Confidence Interval')
    plt.title('2025 Student Enrolment Forecast with Confidence Interval')
    plt.xlabel('Month')
    plt.ylabel('Student Count')
    plt.xticks(months_2025, month_labels, rotation=45)
    plt.legend()
    plt.grid(True, alpha=0.2)
    plt.tight_layout()
    plt.show()

    # --- 2. BAR CHART WITH ERROR BARS ---
    forecast = sorted_df['Forecasted_Actual']
    yerr = [
        forecast - sorted_df['Lower_CI'],  # lower error
        sorted_df['Upper_CI'] - forecast   # upper error
    ]
    plt.figure(figsize=(11,5))
    plt.bar(month_labels, forecast, yerr=yerr, capsize=5, color='red', alpha=0.7)
    plt.title('2025 Forecast with 95% Confidence Error Bars')
    plt.xlabel('Month')
    plt.ylabel('Student Count')
    plt.grid(True, axis='y', alpha=0.2)
    plt.tight_layout()
    plt.show()

# Example usage:
forecast_visuals_with_ci(actual_2025_forecast)

