# Assume ts_historical covers up to Dec 2024, monthly index
# Your 2025 numbers are in a DataFrame with columns ['Year', 'Month_Num', 'Student_Counts']
ts_2025 = pd.Series(
    data=your_2025_plan['Student_Counts'].values,
    index=pd.date_range('2025-01-01', periods=12, freq='MS')
)
ts_full = pd.concat([ts_historical, ts_2025])




from pmdarima import auto_arima

# Fit model on all data up to Dec 2025
auto_model = auto_arima(ts_full, seasonal=True, m=12, trace=True, suppress_warnings=True, stepwise=True)
n_periods = 12  # Forecasting all of 2026 (change to 6 for Janâ€“Jun only)
sarima_pred, sarima_ci = auto_model.predict(n_periods=n_periods, return_conf_int=True, alpha=0.05)

# Create 2026 forecast DataFrame
forecast_months = pd.date_range('2026-01-01', periods=n_periods, freq='MS')
forecast_2026 = pd.DataFrame({
    'Year': forecast_months.year,
    'Month': forecast_months.strftime('%B'),
    'Month_Num': forecast_months.month,
    'Forecasted_Actual': sarima_pred,
    'Lower_CI': sarima_ci[:, 0],
    'Upper_CI': sarima_ci[:, 1],
})




# Concatenate 2025 (plan) and 2026 (forecast)
full_table = pd.concat([your_2025_plan, forecast_2026], ignore_index=True)
# Use the forecast_table_view() or forecast_table_df() functions from above to display



import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

def plot_plan_and_fade_forecast(ts_historical, plan_2025, forecast_2026):
    # Ensure all Series/DataFrames are sorted and have matching frequencies
    ts_historical = ts_historical.sort_index()
    plan_2025 = plan_2025.sort_values('Month_Num').reset_index(drop=True)
    forecast_2026 = forecast_2026.sort_values('Month_Num').reset_index(drop=True)

    # Build x-axis
    months_2025 = pd.to_datetime([f'2025-{m:02d}-01' for m in plan_2025['Month_Num']])
    months_2026 = pd.to_datetime([f'2026-{m:02d}-01' for m in forecast_2026['Month_Num']])

    plt.figure(figsize=(15,6))
    # Historical actuals (blue line)
    plt.plot(ts_historical.index, ts_historical.values, marker='o', color='blue', label='Historical Actual', linewidth=2)
    # 2025 Plan (green line)
    plt.plot(months_2025, plan_2025['Forecasted_Actual'], marker='s', color='green', label='2025 Plan/Forecast', linewidth=2)
    # 2026 Forecast (orange line)
    plt.plot(months_2026, forecast_2026['Forecasted_Actual'], marker='o', color='orange', linestyle='--', label='2026 Forecast (SARIMA)', linewidth=2)
    plt.fill_between(months_2026, forecast_2026['Lower_CI'], forecast_2026['Upper_CI'], color='orange', alpha=0.18, label='2026 95% CI')

    # Mark transition at Jan 2026
    plt.axvline(months_2026[0], color='purple', linestyle='--', linewidth=2, alpha=0.7)
    plt.text(months_2026[0], plt.ylim()[0], "2026", color='purple', fontsize=12, ha='left', va='bottom', alpha=0.9, fontweight='bold')

    # Month ticks and labels
    all_months = list(ts_historical.index) + list(months_2025) + list(months_2026)
    month_labels = [f"{d.year}-{d.month:02d}" for d in all_months]
    plt.xticks(all_months, month_labels, rotation=45)
    plt.title('Student Enrolment: Actuals, 2025 Plan, and 2026 SARIMA Forecast ("Fade")')
    plt.xlabel('Month')
    plt.ylabel('Student Count')
    plt.legend()
    plt.grid(True, alpha=0.3)
    plt.tight_layout()
    plt.show()

# Example usage:
# plot_plan_and_fade_forecast(ts_historical, plan_2025, forecast_2026)
