# =========================================================================
# PLAN vs ACTUAL FORECASTING FOR 2025 (IMPROVED VERSION)
# =========================================================================

%pip install pmdarima

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

from statsmodels.tsa.statespace.sarimax import SARIMAX
from sklearn.metrics import mean_absolute_error, mean_squared_error

try:
    from pmdarima import auto_arima
    AUTO_ARIMA_AVAILABLE = True
    print("pmdarima imported successfully")
except ImportError:
    print("pmdarima not available")
    AUTO_ARIMA_AVAILABLE = False

%matplotlib inline

# -------------------------------
# CELL 1: LOAD AND PREP DATA
# -------------------------------
def load_and_separate_actual_planned_data(file_path):
    print("LOADING ACTUAL vs PLANNED DATA")
    print("="*60)
    complete_spark = spark.read.option("header","true").option("inferSchema","true").csv(file_path)
    complete_data = complete_spark.toPandas()
    print(f"Complete dataset loaded: {complete_data.shape}")
    print(f"Years in dataset: {sorted(complete_data['Reporting_Year'].unique())}")
    historical_actual = complete_data[complete_data['Reporting_Year'] < 2025].copy()
    planned_2025 = complete_data[complete_data['Reporting_Year'] == 2025].copy()
    print(f"\nDATA BREAKDOWN:")
    print(f"   Historical actual (2021-2024): {len(historical_actual)} observations")
    print(f"   Planned 2025 data: {len(planned_2025)} observations")
    return complete_data, historical_actual, planned_2025

def prepare_variance_analysis_data(historical_actual):
    print(f"\nPREPARING VARIANCE ANALYSIS DATA")
    print("="*50)
    month_mapping = {'January': 1, 'Jan': 1, 'February': 2, 'Feb': 2, 'March': 3, 'Mar': 3, 'April': 4, 'Apr': 4, 'May': 5, 'June': 6, 'Jun': 6, 'July': 7, 'Jul': 7, 'August': 8, 'Aug': 8, 'September': 9, 'Sep': 9, 'October': 10, 'Oct': 10, 'November': 11, 'Nov': 11, 'December': 12, 'Dec': 12}
    if historical_actual['Reporting_Month'].dtype == 'object':
        print("Converting month names to numbers...")
        historical_actual['Month_Num'] = historical_actual['Reporting_Month'].map(month_mapping)
    else:
        historical_actual['Month_Num'] = historical_actual['Reporting_Month']
    historical_actual['Date'] = pd.to_datetime({'year': historical_actual['Reporting_Year'], 'month': historical_actual['Month_Num'], 'day': 1})
    historical_actual = historical_actual.sort_values('Date').reset_index(drop=True)
    ts_historical = historical_actual.set_index('Date')['Student_Counts']
    print(f"Historical time series prepared: {len(ts_historical)} observations")
    print(f"   Date range: {ts_historical.index.min()} to {ts_historical.index.max()}")
    return ts_historical, historical_actual

# ---------------
# CELL 2: ANALYSIS
# ---------------
def calculate_historical_variance_patterns(historical_actual):
    print(f"\nCALCULATING HISTORICAL VARIANCE PATTERNS")
    print("="*60)
    yearly_totals = historical_actual.groupby('Reporting_Year')['Student_Counts'].sum()
    yearly_growth = yearly_totals.pct_change().dropna() * 100
    monthly_cv = {}
    for month_num in range(1, 13):
        monthly_data = historical_actual[historical_actual['Month_Num'] == month_num]['Student_Counts']
        if len(monthly_data) > 1:
            cv = monthly_data.std() / monthly_data.mean()
            monthly_cv[month_num] = cv
    overall_cv = historical_actual['Student_Counts'].std() / historical_actual['Student_Counts'].mean()
    return yearly_growth, monthly_cv, overall_cv

# ---------------
# CELL 3: FORECASTING (SCENARIO, ANOMALY, ADAPTIVE)
# ---------------
def forecast_actual_2025_results(planned_2025, yearly_growth, monthly_cv, overall_cv, scenario='base', actuals_so_far=None):
    print(f"\nFORECASTING ACTUAL 2025 RESULTS ({scenario.upper()} SCENARIO)")
    print("="*60)
    month_mapping = {'January': 1, 'Jan': 1, 'February': 2, 'Feb': 2, 'March': 3, 'Mar': 3, 'April': 4, 'Apr': 4, 'May': 5, 'June': 6, 'Jun': 6, 'July': 7, 'Jul': 7, 'August': 8, 'Aug': 8, 'September': 9, 'Sep': 9, 'October': 10, 'Oct': 10, 'November': 11, 'Nov': 11, 'December': 12, 'Dec': 12}
    planned_2025['Month_Num'] = planned_2025['Reporting_Month'].map(month_mapping) if planned_2025['Reporting_Month'].dtype == 'object' else planned_2025['Reporting_Month']
    month_names = {i: m for i, m in enumerate(['January','February','March','April','May','June','July','August','September','October','November','December'], 1)}
    growth_mean, growth_std = yearly_growth.mean(), yearly_growth.std()
    if scenario == 'best':
        growth = growth_mean + growth_std
        volatility_scale = 0.5
    elif scenario == 'worst':
        growth = growth_mean - growth_std
        volatility_scale = 1.5
    else:
        growth = growth_mean
        volatility_scale = 1.0

    forecast_results = []
    for idx, row in planned_2025.iterrows():
        month_num = row['Month_Num']
        planned_value = row['Student_Counts']
        # Adaptive: Replace planned with actual if available
        if actuals_so_far is not None and month_num in actuals_so_far:
            base_forecast = actuals_so_far[month_num]
            anomaly_flag = False
            confidence = "Actual"
            lower_ci, upper_ci = base_forecast, base_forecast
            variance_pct = 0
        else:
            month_cv = monthly_cv.get(month_num, overall_cv) * volatility_scale
            trend_adjustment = 1 + (growth / 100)
            base_forecast = planned_value * trend_adjustment
            volatility_range = base_forecast * month_cv
            lower_ci = max(0, base_forecast - volatility_range * 1.96)
            upper_ci = base_forecast + volatility_range * 1.96
            confidence = "High" if month_cv < 0.1 else "Medium" if month_cv < 0.2 else "Low" if month_cv < 0.4 else "Very Low"
            variance_pct = ((base_forecast - planned_value) / planned_value) * 100
            anomaly_flag = abs(variance_pct) > 2 * growth_std
        forecast_results.append({
            'Month_Num': month_num,
            'Month': month_names[month_num],
            'Planned': planned_value,
            'Forecasted_Actual': int(base_forecast),
            'Lower_CI': int(lower_ci),
            'Upper_CI': int(upper_ci),
            'Confidence': confidence,
            'Variance_from_Plan': int(base_forecast - planned_value),
            'Variance_Pct': variance_pct,
            'Scenario': scenario.title(),
            'Anomaly_Flag': anomaly_flag
        })
    return pd.DataFrame(forecast_results)

# Optional: SARIMA forecast for comparison
def sarima_forecast(ts_historical):
    model = SARIMAX(ts_historical, order=(1,1,1), seasonal_order=(0,1,1,12))
    results = model.fit(disp=False)
    forecast = results.get_forecast(steps=12)
    forecast_mean = forecast.predicted_mean
    conf_int = forecast.conf_int(alpha=0.05)
    return forecast_mean, conf_int

# -------------------------------
# CELL 4: VISUALIZATION
# -------------------------------
def create_plan_vs_actual_visualization(forecast_df, ts_historical):
    """Enhanced visualization: timeseries with sorted months and annotated years/months."""
    # ---- Ensure January–December order for 2025 ----
    sorted_df = forecast_df.sort_values('Month_Num').reset_index(drop=True)
    months_2025 = pd.to_datetime([f'2025-{m:02d}-01' for m in sorted_df['Month_Num']])

    fig, ax = plt.subplots(figsize=(16, 7))
    
    # --- Plot 1: Historical Actuals (2021–2024) ---
    ax.plot(ts_historical.index, ts_historical.values, marker='o', label='Historical Actual (2021–2024)', color='blue')

    # --- Annotate year changes for historical data ---
    years = sorted(ts_historical.index.year.unique())
    for year in years:
        idx = ts_historical.index[ts_historical.index.year == year][0]
        ax.axvline(x=idx, color='gray', linestyle=':', linewidth=1, alpha=0.2)
        ax.text(idx, ax.get_ylim()[0], str(year), color='blue', fontsize=11, ha='left', va='bottom', alpha=0.85)

    # --- Plot 2: 2025 Plan and Forecast ---
    ax.plot(months_2025, sorted_df['Planned'], marker='s', label='2025 Planned', color='green', linestyle='--')
    ax.plot(months_2025, sorted_df['Forecasted_Actual'], marker='^', label='2025 Forecasted Actual', color='red')

    # --- Plot 3: Confidence Intervals for 2025 Forecast ---
    ax.fill_between(months_2025, sorted_df['Lower_CI'], sorted_df['Upper_CI'],
                    color='gray', alpha=0.2, label='2025 95% CI')

    # --- Highlight anomalies in 2025 forecast ---
    for i, row in sorted_df.iterrows():
        if row['Anomaly_Flag']:
            ax.scatter(months_2025[i], row['Forecasted_Actual'], color='black', s=110, edgecolors='yellow', linewidths=2, zorder=10, label='Anomaly' if i == 0 else "")

    # --- X-axis: historical years and 2025 months ---
    ax.set_xlim([ts_historical.index.min(), months_2025[-1]])

    # Major ticks: Years for historical, months for 2025
    ax.xaxis.set_major_locator(mdates.YearLocator())
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))
    # Minor ticks: months
    ax.xaxis.set_minor_locator(mdates.MonthLocator())
    ax.xaxis.set_minor_formatter(mdates.DateFormatter('%b'))

    # Add 2025 month labels under the 2025 plan/forecast points
    month_labels = [m[:3] for m in sorted_df['Month']]
    xtick_positions = list(months_2025)
    # Combine existing ticks and 2025 months for display
    all_xticks = list(ax.get_xticks()) + xtick_positions
    all_xticklabels = [str(int(x)) if isinstance(x, float) and not np.isnan(x) else "" for x in ax.get_xticks()] + month_labels
    ax.set_xticks(all_xticks)
    ax.set_xticklabels(all_xticklabels, rotation=45, ha='right')

    # Titles and labels
    ax.set_title('Student Enrolment: 2021–2024 Actuals, 2025 Plan, and Forecasted Actuals', fontweight='bold')
    ax.set_ylabel('Student Count')
    ax.set_xlabel('Date')
    ax.grid(True, alpha=0.3)
    handles, labels = ax.get_legend_handles_labels()
    # Remove duplicate 'Anomaly' labels
    seen = set()
    new_handles = []
    new_labels = []
    for h, l in zip(handles, labels):
        if l not in seen:
            new_handles.append(h)
            new_labels.append(l)
            seen.add(l)
    ax.legend(new_handles, new_labels)
    plt.tight_layout()
    plt.show()
    print("Plan vs Actual visualization created!")

# -------------------------------
# CELL 5: ACCURACY (OPTIONAL, when actuals are known)
# -------------------------------
def forecast_accuracy_metrics(actuals, forecast_df):
    joined = forecast_df.copy()
    joined['Actuals'] = actuals.values
    joined['Abs_Error'] = np.abs(joined['Forecasted_Actual'] - joined['Actuals'])
    joined['Abs_Pct_Error'] = joined['Abs_Error'] / joined['Actuals'] * 100
    mae = joined['Abs_Error'].mean()
    rmse = np.sqrt((joined['Abs_Error'] ** 2).mean())
    mape = joined['Abs_Pct_Error'].mean()
    return {'MAE': mae, 'RMSE': rmse, 'MAPE': mape}, joined

# =========================================================================
# EXECUTION BLOCK (Run below, keep as-is, or split per notebook cell)
# =========================================================================

file_path = "abfs://folder2@printxpp.dfs.core.windows.net/scratch/opts/data.csv"
complete_data, historical_actual, planned_2025 = load_and_separate_actual_planned_data(file_path)
ts_historical, historical_prepared = prepare_variance_analysis_data(historical_actual)
yearly_growth, monthly_cv, overall_cv = calculate_historical_variance_patterns(historical_actual)

# --- Choose scenario: 'base', 'best', 'worst'
actual_2025_forecast = forecast_actual_2025_results(planned_2025, yearly_growth, monthly_cv, overall_cv, scenario='base')

# --- SARIMA overlay (optional)
sarima_pred, sarima_ci = None, None
try:
    sarima_pred, sarima_ci = sarima_forecast(ts_historical)
except Exception as e:
    print(f"SARIMA not run: {e}")

# --- Visualization
create_plan_vs_actual_visualization(actual_2025_forecast, ts_historical, sarima_pred, sarima_ci)

# --- (Optional) Accuracy metrics if 2025 partial actuals are available
# actuals = pd.Series([...], index=actual_2025_forecast.index)
# metrics, detailed_df = forecast_accuracy_metrics(actuals, actual_2025_forecast)
# print(metrics)

print("\n" + "="*70)
print("PLAN vs ACTUAL FORECASTING COMPLETE!")
print("="*70)
